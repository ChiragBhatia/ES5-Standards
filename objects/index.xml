<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objects on ES5 Standards</title>
    <link>https://chiragbhatia.github.io/ES5-Standards/objects/index.xml</link>
    <description>Recent content in Objects on ES5 Standards</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Oct 2016 00:44:16 +0530</lastBuildDate>
    <atom:link href="https://chiragbhatia.github.io/ES5-Standards/objects/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ES5 Objects</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/</link>
      <pubDate>Sat, 01 Oct 2016 00:44:16 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/</guid>
      <description>

&lt;h1 id=&#34;es-5-objects&#34;&gt;ES-5 Objects&lt;/h1&gt;

&lt;p&gt;Click on any Object in left side menu to know about that object.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.isArray()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.isArray/</link>
      <pubDate>Fri, 11 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.isArray/</guid>
      <description>&lt;p&gt;The &lt;em&gt;Array.isArray()&lt;/em&gt; determines whether the passed value is an Array.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
If the passed object is an Array, true is returned, otherwise false is returned.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array.isArray(obj)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;In most cases instanceof Array should be enough. However, since instanceof Array doesn&amp;rsquo;t work correctly across iframes/window, Array.isArray() would be more robust solution.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;i&gt;Array.isArray()&lt;/i&gt; is slow comparative to &lt;i&gt;instanceof Array&lt;/i&gt; as it performs more robust check and takes a slight performance hit. &lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Array.isArray()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Using Array string litteral
var ar = [];
 var result = Array.isArray(ar);
 // Output: true

// Using new Array with an empty set
 var ar = new Array();
 var result = Array.isArray(ar);
 // Output: true

 var ar = [1, 2, 3];
 var result = Array.isArray(ar);
 // Output: true

// Testing with a string litteral &amp;quot;an array&amp;quot;
 var injectingString = Array.isArray(&amp;quot;an array&amp;quot;);
 document.write(injectingString);
 // Output: false

// Testing with an object litteral
 var injectingObject = Array.isArray({});
 document.write(injectingObject);
 // Output: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://docs.webplatform.org/wiki/javascript/Array/isArray&#34;&gt;https://docs.webplatform.org/wiki/javascript/Array/isArray&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.every()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.every/</link>
      <pubDate>Wed, 16 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.every/</guid>
      <description>&lt;p&gt;The &lt;code&gt;every()&lt;/code&gt; method tests whether all the elements in an array passes the test implemented by the provided function.&lt;/p&gt;

&lt;h3&gt;Need for this&lt;/h3&gt;
Array.prototype.every() provides a clean method for developers to iterate through an array and check if all items in the array pass a certain test criteria without having to loop through the Array manually using a for loop.

&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;Array.prototype.every() provides a clean way for checking if all array items pass the test criteria without having to iterate through the array using for loops.&lt;/li&gt;
    &lt;li&gt;A polyfill is available for Array.prototype.every() for older browsers where the method is not supported by the browser.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Working Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;function isEven(element, index, array) {
  return (element % 2 === 0);
}

[50, 37, 49, 94, 4].every(isEven);   // false
[40, 32, 16, 128, 78].every(isEven); // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/every&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/every&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://docs.webplatform.org/wiki/javascript/Array/every&#34;&gt;https://docs.webplatform.org/wiki/javascript/Array/every&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.tutorialspoint.com/javascript/array_every.htm&#34;&gt;https://www.tutorialspoint.com/javascript/array_every.htm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.filter()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.filter/</link>
      <pubDate>Wed, 16 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.filter/</guid>
      <description>&lt;p&gt;The &lt;code&gt;Array.prototype.filter()&lt;/code&gt; method creates a new array with all elements that pass the filter test implemented by the provided function.&lt;/p&gt;

&lt;h3&gt;Need for this&lt;/h3&gt;
Array.prototype.filter() provides a clean method for developers to iterate through an array and filter out array items based on a certain criteria without having to loop through the Array manually using a for loop.

&lt;h3&gt;Disadvantage&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;The method does not directly modify the original array, but creates a new array instead. This results in usage of extra memory in cases where the original array needs to be replaced.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;Array.prototype.filter() provides a clean way for filtering out unwanted array items based on a filter criteria without having to iterate through the array using for loops.&lt;/li&gt;
    &lt;li&gt;A polyfill is available for Array.prototype.filter() for older browsers where the method is not supported by the browser.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Working Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// Define a callback function to filter prime numbers.
function CheckIfPrime(value, index, ar) {
    var high = Math.floor(Math.sqrt(value)) + 1;

    for (var i = 2; i &amp;lt;= high; i++) {
        if (value % i == 0) {
            return false;
        }
    }
    return true;
}

// Create the original array.
var numbers = [51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73];

// Get the prime numbers that are in the original array.
var primes = numbers.filter(CheckIfPrime);

console.log(primes);
// Output: 53, 59, 61, 67, 71, 73
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff679973(v=vs.94).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/ff679973(v=vs.94).aspx&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.tutorialspoint.com/javascript/array_filter.htm&#34;&gt;https://www.tutorialspoint.com/javascript/array_filter.htm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.forEach()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.forEach/</link>
      <pubDate>Wed, 16 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.forEach/</guid>
      <description>&lt;p&gt;The forEach() method executes a provided function once for each array element&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
forEach() executes the provided callback once for each element present in the array in ascending order. It is not invoked for index properties that have been deleted or are uninitialized (i.e. on sparse arrays).&lt;/p&gt;

&lt;p&gt;callback is invoked with three arguments:&lt;/p&gt;

&lt;p&gt;the element value
the element index
the array being traversed&lt;/p&gt;

&lt;p&gt;If a thisArg parameter is provided to forEach(), it will be passed to callback when invoked, for use as its this value.  Otherwise, the value undefined will be passed for use as its this value. The this value ultimately observable by callback is determined according to the usual rules for determining the this seen by a function.&lt;/p&gt;

&lt;p&gt;The range of elements processed by forEach() is set before the first invocation of callback. Elements that are appended to the array after the call to forEach() begins will not be visited by callback. If the values of existing elements of the array are changed, the value passed to callback will be the value at the time forEach() visits them; elements that are deleted before being visited are not visited. If elements that are already visited are removed (e.g. using shift()) during the iteration, later elements will be skipped - see example below.&lt;/p&gt;

&lt;p&gt;forEach() executes the callback function once for each array element; unlike map() or reduce() it always returns the value undefined and is not chainable. The typical use case is to execute side effects at the end of a chain.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Disadvantage&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;The forEach method calls the callbackfn function one time for each element present in the array, in ascending index order. The callback function is not called for missing elements of the array.&lt;/li&gt;
  &lt;li&gt;The forEach method does not directly modify the original array, but the callback function might modify it.&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;In addition to array objects, the forEach method can be used by any object that has a length property and that has numerically indexed property names.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function logArrayElements(element, index, array) {
	console.log(&#39;a[&#39; + index + &#39;] = &#39; + element);
}

// Notice that index 2 is skipped since there is no item at
// that position in the array.
[2, 5, , 9].forEach(logArrayElements);
// logs:
// a[0] = 2
// a[1] = 5
// a[3] = 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff679980(v=vs.94).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/ff679980(v=vs.94).aspx&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.tutorialspoint.com/javascript/array_filter.htm&#34;&gt;https://www.tutorialspoint.com/javascript/array_filter.htm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.indexOf()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.indexOf/</link>
      <pubDate>Wed, 16 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.indexOf/</guid>
      <description>&lt;p&gt;Returns the index of the first occurrence of a value in an array.&lt;/p&gt;

&lt;h3&gt;Need for this&lt;/h3&gt;
Array.prototype.indexOf() compares searchElement to elements of the Array using strict equality (the same method used by the === or triple-equals operator).

&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;To locate values in an array.&lt;/li&gt;
    &lt;li&gt;Finding all the occurrences of an element&lt;/li&gt;
    &lt;li&gt;Finding if an element exists in the array or not and updating the array&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Working Example&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
//Example 1
var array = [2, 9, 9];
array.indexOf(2);     // 0
array.indexOf(7);     // -1
array.indexOf(9, 2);  // 2
array.indexOf(2, -1); // -1
array.indexOf(2, -3); // 0

//Example 2
//Finding all the occurrences of an element
var indices = [];
var array = [&#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;c&#39;, &#39;a&#39;, &#39;d&#39;];
var element = &#39;a&#39;;
var idx = array.indexOf(element);
while (idx != -1) {
  indices.push(idx);
  idx = array.indexOf(element, idx + 1);
}
console.log(indices);
// [0, 2, 4

//Example 3
//Finding if an element exists in the array or not and updating the array
function updateVegetablesCollection (veggies, veggie) {
    if (veggies.indexOf(veggie) === -1) {
        veggies.push(veggie);
        console.log(&#39;New veggies collection is : &#39; + veggies);
    } else if (veggies.indexOf(veggie) &amp;gt; -1) {
        console.log(veggie + &#39; already exists in the veggies collection.&#39;);
    }
}

var veggies = [&#39;potato&#39;, &#39;tomato&#39;, &#39;chillies&#39;, &#39;green-pepper&#39;];

updateVegetablesCollection(veggies, &#39;spinach&#39;); 
// New veggies collection is : potato,tomato,chillies,green-papper,spinach
updateVegetablesCollection(veggies, &#39;spinach&#39;); 
// spinach already exists in the veggies collection.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff679977(v=vs.94).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/ff679977(v=vs.94).aspx&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.lastIndexOf</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.lastIndexOf/</link>
      <pubDate>Wed, 16 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.lastIndexOf/</guid>
      <description>&lt;p&gt;The index of the last occurrence of searchElement in the array, or -1 if searchElement is not found.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
The lastIndexOf method searches an array for a specified value. The method returns the index of the first occurrence, or -1 if the specified value is not found.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Disadvantage&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;The search occurs in descending index order (last member first). To search in ascending order, use the indexOf Method (Array) (JavaScript).&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;The array elements are compared to the searchElement value by strict equality, similar to the comparison made by the === operator. For more information, see Comparison Operators (JavaScript).&lt;/li&gt;
    &lt;li&gt;The optional fromIndex argument specifies the array index at which to begin the search. If fromIndex is greater than or equal to the array length, the whole array is searched. If fromIndex is negative, the search starts at the array length plus fromIndex. If the computed index is less than 0, -1 is returned.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
// Create an array.
var ar = [&amp;quot;ab&amp;quot;, &amp;quot;cd&amp;quot;, &amp;quot;ef&amp;quot;, &amp;quot;ab&amp;quot;, &amp;quot;cd&amp;quot;];

// Determine the first location, in descending order, of &amp;quot;cd&amp;quot;.
document.write(ar.lastIndexOf(&amp;quot;cd&amp;quot;) + &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;);

// Output: 4

// Find &amp;quot;cd&amp;quot; in descending order, starting at index 2.
document.write(ar.lastIndexOf(&amp;quot;cd&amp;quot;, 2) + &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;);

// Output: 1

// Search for &amp;quot;gh&amp;quot; (which is not found).
document.write(ar.lastIndexOf(&amp;quot;gh&amp;quot;)+ &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;);

// Output: -1

// Find &amp;quot;ab&amp;quot; with a fromIndex argument of -3.
// The search in descending order starts at index 3,
// which is the array length minus 2.
document.write(ar.lastIndexOf(&amp;quot;ab&amp;quot;, -3) + &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;);
// Output: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff679972(v=VS.94).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/ff679972(v=VS.94).aspx&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://github.com/FreeCodeCamp/FreeCodeCamp/wiki/JS-Array-Prototype-LastIndexOf&#34;&gt;https://github.com/FreeCodeCamp/FreeCodeCamp/wiki/JS-Array-Prototype-LastIndexOf&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.map()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.map/</link>
      <pubDate>Wed, 16 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.map/</guid>
      <description>&lt;p&gt;The Array.prototype.map() method creates a new array with the results of calling a provided function on every element in this array.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
map calls a provided callback function once for each element in an array, in order, and constructs a new array from the results. callback is invoked only for indexes of the array which have assigned values, including undefined. It is not called for missing elements of the array (that is, indexes that have never been set, which have been deleted or which have never been assigned a value).&lt;/p&gt;

&lt;p&gt;callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.&lt;/p&gt;

&lt;p&gt;If a thisArg parameter is provided to map, it will be passed to callback when invoked, for use as its this value. Otherwise, the value undefined will be passed for use as its this value. The this value ultimately observable by callback is determined according to the usual rules for determining the this seen by a function.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Disadvantage&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Array.prototype.map() method does not mutate the array on which it is called (although callback, if invoked, may do so).&lt;/li&gt;
  &lt;li&gt;The range of elements processed by map is set before the first invocation of callback. Elements which are appended to the array after the call to map begins will not be visited by callback. If existing elements of the array are changed, their value as passed to callback will be the value at the time map visits them. Elements that are deleted after the call to map begins and before being visited are not visited.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;Due to the algorithm defined in the specification if the array which map was called upon is sparse, resulting array will also be sparse keeping same indices blank.&lt;/li&gt;
    &lt;li&gt;Using map to reformat objects in an array&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var numbers = [1, 5, 10, 15];
var roots = numbers.map(function(x) {
   return x * 2;
});
// roots is now [2, 10, 20, 30]
// numbers is still [1, 5, 10, 15]

var numbers = [1, 4, 9];
var roots = numbers.map(Math.sqrt);
// roots is now [1, 2, 3]
// numbers is still [1, 4, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff679973(v=vs.94).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/ff679973(v=vs.94).aspx&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.tutorialspoint.com/javascript/array_map.htm&#34;&gt;https://www.tutorialspoint.com/javascript/array_map.htm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.reduce()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.reduce/</link>
      <pubDate>Fri, 11 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.reduce/</guid>
      <description>&lt;p&gt;The &lt;em&gt;reduce()&lt;/em&gt; method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arr.reduce(callback[, initialValue])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reduce executes the callback function once for each element present in the array, excluding holes in the array, receiving four arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;previousValue&lt;/li&gt;
  &lt;li&gt;currentValue&lt;/li&gt;
  &lt;li&gt;currentIndex&lt;/li&gt;
  &lt;li&gt;array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Searching for a particular element in a JavaScript array is often carried out using a typical iteration. In some cases, forEach and some can be used as well. What is often overlooked is the potential use of Array.prototype.reduce to perform such an operation.&lt;/li&gt;
  &lt;li&gt;Every time you find yourself going from a list of values to one value ( reducing ) ask yourself if you could leverage the built-in &lt;em&gt;Array.prototype.reduce()&lt;/em&gt; function. You can reduce with any sort of operation that combines two values. Not just addition. And not just arithmetic operations.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look at the following problem (part of JavaScript Under Pressure): &lt;strong&gt;find the longest string&lt;/strong&gt; in an array of strings. An imperative solution looks something like the following code (using forEach may simplify the loop but the idea remains the same):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function findLongest(entries) {
  for (var i = , longest = &#39;&#39;; i &amp;lt; entries.length; ++i)
    if (entries[i].length &amp;gt; longest.length) longest = entries[i];
  return longest;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A version which relies on &lt;strong&gt;reduce&lt;/strong&gt; is a single statement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function findLongest(entries) {
  return entries.reduce(function (longest, entry) {
    return entry.length &amp;gt; longest.length ? entry : longest;
  }, &#39;&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;If an initialValue is provided, the reduce method calls the callbackfn function one time for each element present in the array, in ascending index order. If an initialValue is not provided, the reduce method calls the callbackfn function on each element, starting with the second element.&lt;/li&gt;
  &lt;li&gt;The return value of the callback function is provided as the previousValue argument on the next call to the callback function. The return value of the last call to the callback function is the return value of the reduce method.&lt;/li&gt;
  &lt;li&gt;The callback function is not called for missing elements of the array.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Array.prototype.reduce()&lt;/em&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var total = [0, 1, 2, 3].reduce(function(a, b) {
  return a + b;
});
// total == 6

var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {
  return a.concat(b);
}, []);
// flattened is [0, 1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Define the callback function.
function appendCurrent (previousValue, currentValue) {
return previousValue + &amp;quot;::&amp;quot; + currentValue;
}

// Create an array.
var elements = [&amp;quot;abc&amp;quot;, &amp;quot;def&amp;quot;, 123, 456];

// Call the reduce method, which calls the callback function
// for each array element.
var result = elements.reduce(appendCurrent);

document.write(result);

// Output:
//  abc::def::123::456
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://github.com/FreeCodeCamp/FreeCodeCamp/wiki/JS-Array-Prototype-Reduce&#34;&gt;https://github.com/FreeCodeCamp/FreeCodeCamp/wiki/JS-Array-Prototype-Reduce&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff679975(v=VS.94).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/ff679975(v=VS.94).aspx&lt;/a&gt;
&lt;br/&gt;
&lt;a href=&#34;https://ariya.io/2013/10/searching-using-array-prototype-reduce&#34;&gt;https://ariya.io/2013/10/searching-using-array-prototype-reduce&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.reduceRight()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.reduceRight/</link>
      <pubDate>Fri, 11 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.reduceRight/</guid>
      <description>&lt;p&gt;The &lt;em&gt;reduceRight()&lt;/em&gt; method applies a function against an accumulator and each value of the array (from right-to-left) has to reduce it to a single value.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arr.reduceRight(callback[, initialValue])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reduceRight executes the callback function once for each element present in the array, excluding holes in the array, receiving four arguments: the initial value (or value from the previous callback call), the value of the current element, the current index, and the array over which iteration is occurring.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Having grasped reduce(), it is not a far stretch to get reduceRight(). Whereas reduce() iterates over an array from left to right, reduceRight() iterates from right to left. This does not make a difference for the standard sum/count use cases, but it can come in handy for other purposes. For example, if we have an array of Ang Lee movies sorted in reverse chronological order, we could use reduceRight() to sort these movies in chronological order by decade.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var angLeeMovies = [
{title: &#39;Life of Pi&#39;, year: 2012},
{title: &#39;Brokeback Mountain&#39;, year: 2005},
{title: &#39;Crouching Tiger, Hidden Dragon&#39;, year: 2000},
{title: &#39;The Wedding Banquet&#39;, year: 1993}
  ],
  moviesByDecade;

function addMovieToDecade(filmography, decade, title) {
  filmography[decade] ? filmography[decade].push(title) : filmography[decade] = [title];
  return filmography;
}

moviesByDecade = angLeeMovies.reduceRight(function(previousValue, currentValue) {
  if (currentValue.year &amp;gt;= 2010) {
return addMovieToDecade(previousValue, &amp;quot;2010s&amp;quot;, currentValue.title);
  } else if (currentValue.year &amp;gt;= 2000) {
return addMovieToDecade(previousValue, &amp;quot;2000s&amp;quot;, currentValue.title);
  } else {
return addMovieToDecade(previousValue, &amp;quot;1990s&amp;quot;, currentValue.title);
  }
}, {});

console.log(moviesByDecade);
// {
//   &amp;quot;1990s&amp;quot;: [&amp;quot;The Wedding Banquet&amp;quot;],
//   &amp;quot;2000s&amp;quot;: [&amp;quot;Crouching Tiger, Hidden Dragon&amp;quot;, &amp;quot;Brokeback Mountain&amp;quot;],
//   &amp;quot;2010s&amp;quot;: [&amp;quot;Life of Pi&amp;quot;]
// }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;If an initialValue is provided, the reduceRight method calls the callback function one time for each element in the array, in descending index order. If no initialValue is provided, the reduceRight method calls the callbackfn function on each element, starting with the second-to-last element, in descending index order.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example concatenates array values into a string, separating the values with &amp;ldquo;::&amp;ldquo;. Because no initial value is provided to the &lt;em&gt;reduceRight&lt;/em&gt; method, the first call to the callback function has 456 as the previousValue argument and 123 as the currentValue argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; // Define the callback function.
 function appendCurrent (previousValue, currentValue) {
 return previousValue + &amp;quot;::&amp;quot; + currentValue;
 }

 // Create an array.
 var elements = [&amp;quot;abc&amp;quot;, &amp;quot;def&amp;quot;, 123, 456];

 // Call the reduceRight method, which calls the callback function
 // for each array element, in descending index order.
 var result = elements.reduceRight(appendCurrent);

 document.write(result);

 // Output:
 //  456::123::def::abc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://docs.webplatform.org/wiki/javascript/Array/reduceRight&#34;&gt;https://docs.webplatform.org/wiki/javascript/Array/reduceRight&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.some()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.some/</link>
      <pubDate>Fri, 11 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.some/</guid>
      <description>&lt;p&gt;The &lt;em&gt;some()&lt;/em&gt; method tests whether some element in the array passes the test implemented by the provided function.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
&lt;em&gt;.some()&lt;/em&gt; will run the callback function for each element in the array. Once the callback returns true, .some() will return true. If the callback returns a falsy value for every element in the array then .some() returns false.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;.some()&lt;/em&gt; will not change/mutate the array that called it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arr.some(callback[, thisArg])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;some() executes the callback function once for each element present in the array until it finds one where callback returns a truthy value (a value that becomes true when converted to a Boolean). If such an element is found, some() immediately returns true. Otherwise, some() returns false. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Iterating over an array to search for an item is a pretty common task. With JavaScript, Array.prototype.forEach is often the popular choice. In some cases however, Array.prototype.some can be a better fit for the job if there is no need to search the entire array once a condition is fulfilled.&lt;/li&gt;
  &lt;li&gt;.some() will not change/mutate the array that called it.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Array.prototype.some()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var isEven = function isEven(currentElement, index, array) {
if(currentElement % 2 === 0) {
return true;
} else {
return false;
}
}

var arr1 = [1, 2, 3, 4, 5, 6];
arr1.some(isEven);  // returns true
var arr2 = [1, 3, 5, 7];
arr2.some(isEven);  // returns false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://ariya.io/2013/08/searching-with-array-prototype-some&#34;&gt;https://ariya.io/2013/08/searching-with-array-prototype-some&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Date.now()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Date.now/</link>
      <pubDate>Mon, 30 Jan 2017 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Date.now/</guid>
      <description>&lt;p&gt;The &lt;em&gt;Date.now()&lt;/em&gt; method returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
Returns the number of milliseconds between midnight, January 1, 1970, and the current date and time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var timeInMs = Date.now();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Date.getTime() and Date.now() are effectively equivalent but Date.now() is twice faster than the former.
  &lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Date.now()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var start = Date.now();
var response = prompt(&amp;quot;What is your name?&amp;quot;, &amp;quot;&amp;quot;);
var end = Date.now();
var elapsed = (end - start) / 1000;
document.write(&amp;quot;You took &amp;quot; + elapsed + &amp;quot; seconds&amp;quot; + &amp;quot; to type: &amp;quot; + response);

// Output:
// You took &amp;lt;seconds&amp;gt; seconds to type: &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/12517359/performance-date-now-vs-date-gettime&#34;&gt;http://stackoverflow.com/questions/12517359/performance-date-now-vs-date-gettime&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Date.prototype.toISOString()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Date.prototype.toISOString/</link>
      <pubDate>Mon, 30 Jan 2017 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Date.prototype.toISOString/</guid>
      <description>&lt;p&gt;The toISOString() method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix &amp;ldquo;Z&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
Returns a date as a string value in simplified ISO 8601 Extended format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dateObj.toISOString()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;The ISO 8601 Extended format is supported by Date.parse(), it is therefore a good choice when dates need to be exchanged between APIs.
  &lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Date.prototype.toISOString()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var today = new Date(&#39;05 October 2011 14:48 UTC&#39;);

console.log(today.toISOString()); // Returns 2011-10-05T14:48:00.000Z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://docs.webplatform.org/wiki/javascript/Date/toISOString&#34;&gt;https://docs.webplatform.org/wiki/javascript/Date/toISOString&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Date.prototype.toJSON()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Date.prototype.toJSON/</link>
      <pubDate>Mon, 30 Jan 2017 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Date.prototype.toJSON/</guid>
      <description>&lt;p&gt;The toJSON() method returns a string representation of the Date object.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
Date instances refer to a specific point in time. Calling toJSON() returns a string (using toISOString()) representing the Date object&amp;rsquo;s value. This method is generally intended to, by default, usefully serialize Date objects during JSON serialization.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dateObj.toJSON()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Date.prototype.toJSON()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var jsonDate = (new Date()).toJSON();
var backToDate = new Date(jsonDate);

console.log(jsonDate); //2015-10-26T07:46:36.611Z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/11382606/javascript-date-tojson-dont-get-the-timezone-offset&#34;&gt;http://stackoverflow.com/questions/11382606/javascript-date-tojson-dont-get-the-timezone-offset&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Function.prototype.bind()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Function.prototype.bind/</link>
      <pubDate>Mon, 30 Jan 2017 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Function.prototype.bind/</guid>
      <description>&lt;p&gt;The &lt;em&gt;bind()&lt;/em&gt; method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
The bind() function creates a new bound function (BF). A BF is an exotic function object (term from ECMAScript 2015)  that wraps the original function object. Calling a BF generally results in the execution of its wrapped function.
A BF has the following internal properties:&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;&lt;li&gt;[[BoundTargetFunction]] - the wrapped function object;&lt;/li&gt;
   &lt;li&gt;[[BoundThis]] - the value that is always passed as the this value when calling the wrapped function.&lt;/li&gt;&lt;li&gt;[[BoundArguments]]  - a list of values whose elements are used as the first arguments to any call to the wrapped function.&lt;/li&gt;&lt;li&gt;[[Call]] - executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a this value and a list containing the arguments passed to the function by a call expression.&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;/ul&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fun.bind(thisArg[, arg1[, arg2[, ...]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Function binding is most probably your least concern when beginning with JavaScript, but when you realize that you need a solution to the problem of how to keep the context of this within another function, then you might not realize that what you actually need is Function.prototype.bind().
  &lt;/li&gt;
  &lt;li&gt;The first time you hit upon the problem, you might be inclined to set this to a variable that you can reference when you change context. Many people opt for self, _this or sometimes context as a variable name. They’re all usable and nothing is wrong with doing that, but this is a better way.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;As you can see, unfortunately, Function.prototype.bind isn’t supported in Internet Explorer 8 and below, so you’ll run into problems if you try to use it without a fallback.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Function.prototype.bind()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Button = function(content) { 
  this.content = content;
};
Button.prototype.click = function() {
  console.log(this.content + &#39; clicked&#39;);
}

var myButton = new Button(&#39;OK&#39;);
myButton.click();

var looseClick = myButton.click;
looseClick(); // not bound, &#39;this&#39; is not myButton - it is the global object

var boundClick = myButton.click.bind(myButton);
boundClick(); // bound, &#39;this&#39; is myButton
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which prints out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OK clicked
undefined clicked
OK clicked
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also add extra parameters after the 1st (this) parameter and bind will pass in those values to the original function. Any additional parameters you later pass to the bound function will be passed in after the bound parameters:&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind&lt;/a&gt;
&lt;a href=&#34;https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/&#34;&gt;https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/&lt;/a&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/2236747/use-of-the-javascript-bind-method&#34;&gt;http://stackoverflow.com/questions/2236747/use-of-the-javascript-bind-method&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>