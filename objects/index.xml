<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objects on ES5 Standards</title>
    <link>https://chiragbhatia.github.io/ES5-Standards/objects/index.xml</link>
    <description>Recent content in Objects on ES5 Standards</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Jan 2017 00:45:05 +0530</lastBuildDate>
    <atom:link href="https://chiragbhatia.github.io/ES5-Standards/objects/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Date.now()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Date.now/</link>
      <pubDate>Fri, 20 Jan 2017 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Date.now/</guid>
      <description>&lt;p&gt;The &lt;em&gt;Date.now()&lt;/em&gt; method returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
Returns the number of milliseconds between midnight, January 1, 1970, and the current date and time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var timeInMs = Date.now();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Date.getTime() and Date.now() are effectively equivalent but Date.now() is twice faster than the former.
  &lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Date.now()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var start = Date.now();
var response = prompt(&amp;quot;What is your name?&amp;quot;, &amp;quot;&amp;quot;);
var end = Date.now();
var elapsed = (end - start) / 1000;
document.write(&amp;quot;You took &amp;quot; + elapsed + &amp;quot; seconds&amp;quot; + &amp;quot; to type: &amp;quot; + response);

// Output:
// You took &amp;lt;seconds&amp;gt; seconds to type: &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/12517359/performance-date-now-vs-date-gettime&#34;&gt;http://stackoverflow.com/questions/12517359/performance-date-now-vs-date-gettime&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Date.prototype.toISOString()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Date.prototype.toISOString/</link>
      <pubDate>Fri, 20 Jan 2017 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Date.prototype.toISOString/</guid>
      <description>&lt;p&gt;The toISOString() method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix &amp;ldquo;Z&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
Returns a date as a string value in simplified ISO 8601 Extended format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dateObj.toISOString()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;The ISO 8601 Extended format is supported by Date.parse(), it is therefore a good choice when dates need to be exchanged between APIs.
  &lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Date.prototype.toISOString()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var today = new Date(&#39;05 October 2011 14:48 UTC&#39;);

console.log(today.toISOString()); // Returns 2011-10-05T14:48:00.000Z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://docs.webplatform.org/wiki/javascript/Date/toISOString&#34;&gt;https://docs.webplatform.org/wiki/javascript/Date/toISOString&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Date.prototype.toJSON()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Date.prototype.toJSON/</link>
      <pubDate>Fri, 20 Jan 2017 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Date.prototype.toJSON/</guid>
      <description>&lt;p&gt;The toJSON() method returns a string representation of the Date object.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
Date instances refer to a specific point in time. Calling toJSON() returns a string (using toISOString()) representing the Date object&amp;rsquo;s value. This method is generally intended to, by default, usefully serialize Date objects during JSON serialization.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dateObj.toJSON()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Date.prototype.toJSON()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var jsonDate = (new Date()).toJSON();
var backToDate = new Date(jsonDate);

console.log(jsonDate); //2015-10-26T07:46:36.611Z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/11382606/javascript-date-tojson-dont-get-the-timezone-offset&#34;&gt;http://stackoverflow.com/questions/11382606/javascript-date-tojson-dont-get-the-timezone-offset&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Function.prototype.bind()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Function.prototype.bind/</link>
      <pubDate>Fri, 20 Jan 2017 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Function.prototype.bind/</guid>
      <description>&lt;p&gt;The &lt;em&gt;bind()&lt;/em&gt; method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
The bind() function creates a new bound function (BF). A BF is an exotic function object (term from ECMAScript 2015)  that wraps the original function object. Calling a BF generally results in the execution of its wrapped function.
A BF has the following internal properties:&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;&lt;li&gt;[[BoundTargetFunction]] - the wrapped function object;&lt;/li&gt;
   &lt;li&gt;[[BoundThis]] - the value that is always passed as the this value when calling the wrapped function.&lt;/li&gt;&lt;li&gt;[[BoundArguments]]  - a list of values whose elements are used as the first arguments to any call to the wrapped function.&lt;/li&gt;&lt;li&gt;[[Call]] - executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a this value and a list containing the arguments passed to the function by a call expression.&lt;/li&gt;&lt;/p&gt;

&lt;p&gt;&lt;/ul&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fun.bind(thisArg[, arg1[, arg2[, ...]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Function binding is most probably your least concern when beginning with JavaScript, but when you realize that you need a solution to the problem of how to keep the context of this within another function, then you might not realize that what you actually need is Function.prototype.bind().
  &lt;/li&gt;
  &lt;li&gt;The first time you hit upon the problem, you might be inclined to set this to a variable that you can reference when you change context. Many people opt for self, _this or sometimes context as a variable name. They’re all usable and nothing is wrong with doing that, but this is a better way.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;As you can see, unfortunately, Function.prototype.bind isn’t supported in Internet Explorer 8 and below, so you’ll run into problems if you try to use it without a fallback.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Function.prototype.bind()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Button = function(content) { 
  this.content = content;
};
Button.prototype.click = function() {
  console.log(this.content + &#39; clicked&#39;);
}

var myButton = new Button(&#39;OK&#39;);
myButton.click();

var looseClick = myButton.click;
looseClick(); // not bound, &#39;this&#39; is not myButton - it is the global object

var boundClick = myButton.click.bind(myButton);
boundClick(); // bound, &#39;this&#39; is myButton
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which prints out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OK clicked
undefined clicked
OK clicked
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also add extra parameters after the 1st (this) parameter and bind will pass in those values to the original function. Any additional parameters you later pass to the bound function will be passed in after the bound parameters:&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind&lt;/a&gt;
&lt;a href=&#34;https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/&#34;&gt;https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/&lt;/a&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/2236747/use-of-the-javascript-bind-method&#34;&gt;http://stackoverflow.com/questions/2236747/use-of-the-javascript-bind-method&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Strict Mode</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/strict%20mode/</link>
      <pubDate>Fri, 20 Jan 2017 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/strict%20mode/</guid>
      <description>&lt;p&gt;&lt;em&gt;Strict Mode&lt;/em&gt; is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a &amp;ldquo;strict&amp;rdquo; operating context. This strict context prevents certain actions from being taken and throws more exceptions.&lt;/p&gt;

&lt;p&gt;You can enable the strict mode by declaring this in the top of your script/function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Why Strict Mode?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Strict mode makes it easier to write &amp;ldquo;secure&amp;rdquo; JavaScript.
  &lt;/li&gt;
  &lt;li&gt;Strict mode changes previously accepted &amp;ldquo;bad syntax&amp;rdquo; into real errors. As an example, in normal JavaScript, mistyping a variable name creates a new global variable. In strict mode, this will throw an error, making it impossible to accidentally create a global variable.
  &lt;/li&gt;
  &lt;li&gt;In normal JavaScript, a developer will not receive any error feedback assigning values to non-writable properties.
  &lt;/li&gt;
  &lt;li&gt;In strict mode, any assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object, will throw an error.
  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Where should I use &amp;lsquo;use strict&amp;rsquo;;?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In my existing JavaScript code: &lt;b&gt;Probably not!&lt;/b&gt; If your existing JavaScript code has statements that are prohibited in strict-mode, the application will simply break. If you want strict mode, you should be prepared to debug and correct your existing code. This is why using &amp;lsquo;use strict&amp;rsquo;; does not suddenly make your code better.
  &lt;/li&gt;
  &lt;li&gt;In my new JavaScript application: &lt;b&gt;Absolutely!&lt;/b&gt; Strict mode can be used as a whistleblower when you are doing something stupid with your code.
  &lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;How do I use strict mode?&lt;/h3&gt;
1.Insert a &amp;lsquo;use strict&amp;rsquo;; statement on top of your script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// File: myscript.js

&#39;use strict&#39;;
var a = 2;
....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that everything in the file myscript.js will be interpreted in strict mode.&lt;/p&gt;

&lt;p&gt;2.Insert a &amp;lsquo;use strict&amp;rsquo;; statement on top of your function body:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function doSomething() {
    &#39;use strict&#39;;
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everything in the lexical scope of function doSomething will be interpreted in strict mode.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;List of features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In strict mode all variables have to be declared: if you assign a value to an identifier that has not been declared as variable, function, function parameter, catch-clause parameter or property of the global Object, then you will get a ReferenceError. In normal mode the identifier is implicitly declared as a global variable (as a property of the global Object)&lt;/li&gt;
&lt;li&gt;In strict mode the keyword this has the value undefined in functions that were invoked as functions (not as methods). (In normal mode this always points to the global Object). This difference can be used to test if an implementation supports the strict mode: &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;//var hasStrictMode = (function() { &amp;ldquo;use strict&amp;rdquo;; return this===undefined }());&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;/li&gt;
&lt;li&gt;Also when a function is invoked with call() or apply in strict mode, then this is exactly the value of the first argument of the call()or apply() invocation. (In normal mode null and undefined are replaced by the global Object and values, which are not objects, are cast into objects.)&lt;/li&gt;
&lt;li&gt;You cannot use the with-statement in strict mode.
&lt;/li&gt;
&lt;li&gt;In strict mode you will get a TypeError, when you try to assign to readonly properties or to define new properties for a non extensible object. (In normal mode both simply fail without error message.)
&lt;/li&gt;
&lt;li&gt;In strict mode, when passing code to eval(), you cannot declare or define variables or functions in the scope of the caller (as you can do it in normal mode). Instead, a new scope is created for eval() and the variables and functions are within that scope. That scope is destroyed after eval() finishes execution.
&lt;/li&gt;
&lt;li&gt;In strict mode the arguments-object of a function contains a static copy of the values, which are passed to that function. In normal mode the arguments-object has a somewhat &amp;ldquo;magical&amp;rdquo; behaviour: The elements of the array and the named function parameters reference both the same value.
&lt;/li&gt;
&lt;li&gt;In strict mode you will get a SyntaxError when the delete operator is followed by a non qualified identifier (a variable, function or function parameter). In normal mode the delete expression would do nothing and is evaluated to false.
&lt;/li&gt;
&lt;li&gt;In strict mode you will get a TypeError when you try to delete a non configurable property. (In normal mode the attempt simply fails and the delete expression is evaluated to false).
&lt;/li&gt;
&lt;li&gt;In strict mode it is considered a syntactical error when you try to define several properties with the same name for an object literal. (In normal mode there is no error.)
&lt;/li&gt;
&lt;li&gt;In strict mode it is considered a syntactical error when a function declaration has multiple parameters with the same name. (In normal mode there is no error.)
&lt;/li&gt;
&lt;li&gt;In strict mode octal literals are not allowed (these are literals that start with 0x. (In normal mode some implementations do allow octal literals.)
&lt;/li&gt;
&lt;li&gt;In strict mode are more restrictions on the possibilities to examine the call stack. arguments.caller and arguments.callee cause a TypeError in a function in strict mode. Furthermore, some caller- and arguments properties of functions in strict mode cause a TypeError when you try to read them.
&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Eliminate JavaScript silent errors by throwing error.&lt;/li&gt;
&lt;li&gt;Fixes mistake that make it difficult for JavaScript engine to perform optimisation.&lt;/li&gt;
&lt;li&gt;Make code run faster sometime than identical code that’s not in strict mode
&lt;/li&gt;
&lt;li&gt;Make code run faster sometime than identical code that’s not in strict mode
Prohibits some syntax likely to be defined in future version of ECMAScript.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://javascriptweblog.wordpress.com/2011/05/03/javascript-strict-mode/&#34;&gt;https://javascriptweblog.wordpress.com/2011/05/03/javascript-strict-mode/&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;http://cjihrig.com/blog/javascripts-strict-mode-and-why-you-should-use-it/&#34;&gt;http://cjihrig.com/blog/javascripts-strict-mode-and-why-you-should-use-it/&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/8651415/what-is-strict-mode-and-how-is-it-used&#34;&gt;http://stackoverflow.com/questions/8651415/what-is-strict-mode-and-how-is-it-used&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>String.prototype.trim()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/String.prototype.trim/</link>
      <pubDate>Fri, 20 Jan 2017 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/String.prototype.trim/</guid>
      <description>&lt;p&gt;The &lt;em&gt;trim()&lt;/em&gt; method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
The trim() method returns the string stripped of whitespace from both ends. trim() does not affect the value of the string itself.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;str.trim()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Most JavaScript trim() implementations you see around are based on regular expressions and work fairly well for infrequent use on short strings. But using this method it is better and faster.
  &lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;For browsers that do not support string.trim(), e.g. Internet Explorer 8 or earlier, you can add your own trim() method to string object&amp;rsquo;s prototype by including the following script in the &lt;HEAD&gt; section of your page, prior to any script that uses string.trim():&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!String.prototype.trim) {
  String.prototype.trim = function () {
    return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, &#39;&#39;);
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;String.prototype.trim()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var orig = &#39;   foo  &#39;;
console.log(orig.trim()); // &#39;foo&#39;

// Another example of .trim() removing whitespace from just one side.

var orig = &#39;foo    &#39;;
console.log(orig.trim()); // &#39;foo&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/trim&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/498970/trim-string-in-javascript&#34;&gt;http://stackoverflow.com/questions/498970/trim-string-in-javascript&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ES5 Objects</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/</link>
      <pubDate>Sat, 01 Oct 2016 00:44:16 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/</guid>
      <description>

&lt;h1 id=&#34;es-5-objects&#34;&gt;ES-5 Objects&lt;/h1&gt;

&lt;p&gt;Click on any Object in left side menu to know about that object.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.isArray()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.isArray/</link>
      <pubDate>Fri, 11 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.isArray/</guid>
      <description>&lt;p&gt;The &lt;em&gt;Array.isArray()&lt;/em&gt; determines whether the passed value is an Array.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
If the passed object is an Array, true is returned, otherwise false is returned.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array.isArray(obj)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;In most cases instanceof Array should be enough. However, since instanceof Array doesn&amp;rsquo;t work correctly across iframes/window, Array.isArray() would be more robust solution.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;i&gt;Array.isArray()&lt;/i&gt; is slow comparative to &lt;i&gt;instanceof Array&lt;/i&gt; as it performs more robust check and takes a slight performance hit. &lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Array.isArray()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Using Array string litteral
var ar = [];
 var result = Array.isArray(ar);
 // Output: true

// Using new Array with an empty set
 var ar = new Array();
 var result = Array.isArray(ar);
 // Output: true

 var ar = [1, 2, 3];
 var result = Array.isArray(ar);
 // Output: true

// Testing with a string litteral &amp;quot;an array&amp;quot;
 var injectingString = Array.isArray(&amp;quot;an array&amp;quot;);
 document.write(injectingString);
 // Output: false

// Testing with an object litteral
 var injectingObject = Array.isArray({});
 document.write(injectingObject);
 // Output: false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://docs.webplatform.org/wiki/javascript/Array/isArray&#34;&gt;https://docs.webplatform.org/wiki/javascript/Array/isArray&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.every()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.every/</link>
      <pubDate>Wed, 16 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.every/</guid>
      <description>&lt;p&gt;The &lt;code&gt;every()&lt;/code&gt; method tests whether all the elements in an array passes the test implemented by the provided function.&lt;/p&gt;

&lt;h3&gt;Need for this&lt;/h3&gt;
Array.prototype.every() provides a clean method for developers to iterate through an array and check if all items in the array pass a certain test criteria without having to loop through the Array manually using a for loop.

&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;Array.prototype.every() provides a clean way for checking if all array items pass the test criteria without having to iterate through the array using for loops.&lt;/li&gt;
    &lt;li&gt;A polyfill is available for Array.prototype.every() for older browsers where the method is not supported by the browser.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Working Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;function isEven(element, index, array) {
  return (element % 2 === 0);
}

[50, 37, 49, 94, 4].every(isEven);   // false
[40, 32, 16, 128, 78].every(isEven); // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/every&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/every&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://docs.webplatform.org/wiki/javascript/Array/every&#34;&gt;https://docs.webplatform.org/wiki/javascript/Array/every&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.tutorialspoint.com/javascript/array_every.htm&#34;&gt;https://www.tutorialspoint.com/javascript/array_every.htm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.filter()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.filter/</link>
      <pubDate>Wed, 16 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.filter/</guid>
      <description>&lt;p&gt;The &lt;code&gt;Array.prototype.filter()&lt;/code&gt; method creates a new array with all elements that pass the filter test implemented by the provided function.&lt;/p&gt;

&lt;h3&gt;Need for this&lt;/h3&gt;
Array.prototype.filter() provides a clean method for developers to iterate through an array and filter out array items based on a certain criteria without having to loop through the Array manually using a for loop.

&lt;h3&gt;Disadvantage&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;The method does not directly modify the original array, but creates a new array instead. This results in usage of extra memory in cases where the original array needs to be replaced.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;Array.prototype.filter() provides a clean way for filtering out unwanted array items based on a filter criteria without having to iterate through the array using for loops.&lt;/li&gt;
    &lt;li&gt;A polyfill is available for Array.prototype.filter() for older browsers where the method is not supported by the browser.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Working Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// Define a callback function to filter prime numbers.
function CheckIfPrime(value, index, ar) {
    var high = Math.floor(Math.sqrt(value)) + 1;

    for (var i = 2; i &amp;lt;= high; i++) {
        if (value % i == 0) {
            return false;
        }
    }
    return true;
}

// Create the original array.
var numbers = [51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73];

// Get the prime numbers that are in the original array.
var primes = numbers.filter(CheckIfPrime);

console.log(primes);
// Output: 53, 59, 61, 67, 71, 73
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff679973(v=vs.94).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/ff679973(v=vs.94).aspx&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://www.tutorialspoint.com/javascript/array_filter.htm&#34;&gt;https://www.tutorialspoint.com/javascript/array_filter.htm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.reduce()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.reduce/</link>
      <pubDate>Fri, 11 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.reduce/</guid>
      <description>&lt;p&gt;The &lt;em&gt;reduce()&lt;/em&gt; method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arr.reduce(callback[, initialValue])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reduce executes the callback function once for each element present in the array, excluding holes in the array, receiving four arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;previousValue&lt;/li&gt;
  &lt;li&gt;currentValue&lt;/li&gt;
  &lt;li&gt;currentIndex&lt;/li&gt;
  &lt;li&gt;array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Searching for a particular element in a JavaScript array is often carried out using a typical iteration. In some cases, forEach and some can be used as well. What is often overlooked is the potential use of Array.prototype.reduce to perform such an operation.&lt;/li&gt;
  &lt;li&gt;Every time you find yourself going from a list of values to one value ( reducing ) ask yourself if you could leverage the built-in &lt;em&gt;Array.prototype.reduce()&lt;/em&gt; function. You can reduce with any sort of operation that combines two values. Not just addition. And not just arithmetic operations.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look at the following problem (part of JavaScript Under Pressure): &lt;strong&gt;find the longest string&lt;/strong&gt; in an array of strings. An imperative solution looks something like the following code (using forEach may simplify the loop but the idea remains the same):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function findLongest(entries) {
  for (var i = , longest = &#39;&#39;; i &amp;lt; entries.length; ++i)
    if (entries[i].length &amp;gt; longest.length) longest = entries[i];
  return longest;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A version which relies on &lt;strong&gt;reduce&lt;/strong&gt; is a single statement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function findLongest(entries) {
  return entries.reduce(function (longest, entry) {
    return entry.length &amp;gt; longest.length ? entry : longest;
  }, &#39;&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;If an initialValue is provided, the reduce method calls the callbackfn function one time for each element present in the array, in ascending index order. If an initialValue is not provided, the reduce method calls the callbackfn function on each element, starting with the second element.&lt;/li&gt;
  &lt;li&gt;The return value of the callback function is provided as the previousValue argument on the next call to the callback function. The return value of the last call to the callback function is the return value of the reduce method.&lt;/li&gt;
  &lt;li&gt;The callback function is not called for missing elements of the array.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Array.prototype.reduce()&lt;/em&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var total = [0, 1, 2, 3].reduce(function(a, b) {
  return a + b;
});
// total == 6

var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {
  return a.concat(b);
}, []);
// flattened is [0, 1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Define the callback function.
function appendCurrent (previousValue, currentValue) {
return previousValue + &amp;quot;::&amp;quot; + currentValue;
}

// Create an array.
var elements = [&amp;quot;abc&amp;quot;, &amp;quot;def&amp;quot;, 123, 456];

// Call the reduce method, which calls the callback function
// for each array element.
var result = elements.reduce(appendCurrent);

document.write(result);

// Output:
//  abc::def::123::456
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://github.com/FreeCodeCamp/FreeCodeCamp/wiki/JS-Array-Prototype-Reduce&#34;&gt;https://github.com/FreeCodeCamp/FreeCodeCamp/wiki/JS-Array-Prototype-Reduce&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/ff679975(v=VS.94).aspx&#34;&gt;https://msdn.microsoft.com/en-us/library/ff679975(v=VS.94).aspx&lt;/a&gt;
&lt;br/&gt;
&lt;a href=&#34;https://ariya.io/2013/10/searching-using-array-prototype-reduce&#34;&gt;https://ariya.io/2013/10/searching-using-array-prototype-reduce&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.reduceRight()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.reduceRight/</link>
      <pubDate>Fri, 11 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.reduceRight/</guid>
      <description>&lt;p&gt;The &lt;em&gt;reduceRight()&lt;/em&gt; method applies a function against an accumulator and each value of the array (from right-to-left) has to reduce it to a single value.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arr.reduceRight(callback[, initialValue])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reduceRight executes the callback function once for each element present in the array, excluding holes in the array, receiving four arguments: the initial value (or value from the previous callback call), the value of the current element, the current index, and the array over which iteration is occurring.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Having grasped reduce(), it is not a far stretch to get reduceRight(). Whereas reduce() iterates over an array from left to right, reduceRight() iterates from right to left. This does not make a difference for the standard sum/count use cases, but it can come in handy for other purposes. For example, if we have an array of Ang Lee movies sorted in reverse chronological order, we could use reduceRight() to sort these movies in chronological order by decade.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var angLeeMovies = [
{title: &#39;Life of Pi&#39;, year: 2012},
{title: &#39;Brokeback Mountain&#39;, year: 2005},
{title: &#39;Crouching Tiger, Hidden Dragon&#39;, year: 2000},
{title: &#39;The Wedding Banquet&#39;, year: 1993}
  ],
  moviesByDecade;

function addMovieToDecade(filmography, decade, title) {
  filmography[decade] ? filmography[decade].push(title) : filmography[decade] = [title];
  return filmography;
}

moviesByDecade = angLeeMovies.reduceRight(function(previousValue, currentValue) {
  if (currentValue.year &amp;gt;= 2010) {
return addMovieToDecade(previousValue, &amp;quot;2010s&amp;quot;, currentValue.title);
  } else if (currentValue.year &amp;gt;= 2000) {
return addMovieToDecade(previousValue, &amp;quot;2000s&amp;quot;, currentValue.title);
  } else {
return addMovieToDecade(previousValue, &amp;quot;1990s&amp;quot;, currentValue.title);
  }
}, {});

console.log(moviesByDecade);
// {
//   &amp;quot;1990s&amp;quot;: [&amp;quot;The Wedding Banquet&amp;quot;],
//   &amp;quot;2000s&amp;quot;: [&amp;quot;Crouching Tiger, Hidden Dragon&amp;quot;, &amp;quot;Brokeback Mountain&amp;quot;],
//   &amp;quot;2010s&amp;quot;: [&amp;quot;Life of Pi&amp;quot;]
// }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;Disadvantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;If an initialValue is provided, the reduceRight method calls the callback function one time for each element in the array, in descending index order. If no initialValue is provided, the reduceRight method calls the callbackfn function on each element, starting with the second-to-last element, in descending index order.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example concatenates array values into a string, separating the values with &amp;ldquo;::&amp;ldquo;. Because no initial value is provided to the &lt;em&gt;reduceRight&lt;/em&gt; method, the first call to the callback function has 456 as the previousValue argument and 123 as the currentValue argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; // Define the callback function.
 function appendCurrent (previousValue, currentValue) {
 return previousValue + &amp;quot;::&amp;quot; + currentValue;
 }

 // Create an array.
 var elements = [&amp;quot;abc&amp;quot;, &amp;quot;def&amp;quot;, 123, 456];

 // Call the reduceRight method, which calls the callback function
 // for each array element, in descending index order.
 var result = elements.reduceRight(appendCurrent);

 document.write(result);

 // Output:
 //  456::123::def::abc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://docs.webplatform.org/wiki/javascript/Array/reduceRight&#34;&gt;https://docs.webplatform.org/wiki/javascript/Array/reduceRight&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Array.prototype.some()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.some/</link>
      <pubDate>Fri, 11 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/Array.prototype.some/</guid>
      <description>&lt;p&gt;The &lt;em&gt;some()&lt;/em&gt; method tests whether some element in the array passes the test implemented by the provided function.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Need for this&lt;/h3&gt;
&lt;em&gt;.some()&lt;/em&gt; will run the callback function for each element in the array. Once the callback returns true, .some() will return true. If the callback returns a falsy value for every element in the array then .some() returns false.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;.some()&lt;/em&gt; will not change/mutate the array that called it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arr.some(callback[, thisArg])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;some() executes the callback function once for each element present in the array until it finds one where callback returns a truthy value (a value that becomes true when converted to a Boolean). If such an element is found, some() immediately returns true. Otherwise, some() returns false. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Iterating over an array to search for an item is a pretty common task. With JavaScript, Array.prototype.forEach is often the popular choice. In some cases however, Array.prototype.some can be a better fit for the job if there is no need to search the entire array once a condition is fulfilled.&lt;/li&gt;
  &lt;li&gt;.some() will not change/mutate the array that called it.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Working Example&lt;/h3&gt;
The following example illustrates the use of the &lt;em&gt;Array.prototype.some()&lt;/em&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var isEven = function isEven(currentElement, index, array) {
if(currentElement % 2 === 0) {
return true;
} else {
return false;
}
}

var arr1 = [1, 2, 3, 4, 5, 6];
arr1.some(isEven);  // returns true
var arr2 = [1, 3, 5, 7];
arr2.some(isEven);  // returns false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some&lt;/a&gt;&lt;br/&gt;
&lt;a href=&#34;https://ariya.io/2013/08/searching-with-array-prototype-some&#34;&gt;https://ariya.io/2013/08/searching-with-array-prototype-some&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JSON.parse()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/JSON.parse/</link>
      <pubDate>Fri, 11 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/JSON.parse/</guid>
      <description>&lt;p&gt;The JSON.parse() method parses a JSON string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned.&lt;/p&gt;

&lt;h3&gt;Need for this&lt;/h3&gt;
JSON.parse allows developers to fetch JSON strings through ajax requests or other similar methods and convert them into a JSON object. Prior to the introduction of `JSON.parse()`, a common approach used by developers to convert a string to a JSON object was to use `eval()`. Using `eval()` for conversion of data can be dangerous since the JSON data may be suffixed with malicious code which can get evaluated unintentionally. `JSON.parse` ensures that no code is run within the string as it is only responsible for conversion.

&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;JSON.parse() ensures that the JSON string is not malformed.&lt;/li&gt;
  &lt;li&gt;JSON.parse() allows a second (reviver) parameter to transform the JSON values before they are returned as a JSON object.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Working Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;JSON.parse(&#39;{&amp;quot;p&amp;quot;: 5}&#39;, (key, value) =&amp;gt;
typeof value === &#39;number&#39;
? value * 2 // return value * 2 for numbers
: value     // return everything else unchanged
);

// { p: 10 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&#34;&gt;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://msdn.microsoft.com/library/cc836466(v=vs.94).aspx&#34;&gt;https://msdn.microsoft.com/library/cc836466(v=vs.94).aspx&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JSON.parse()</title>
      <link>https://chiragbhatia.github.io/ES5-Standards/objects/JSON.stringify/</link>
      <pubDate>Wed, 16 Nov 2016 00:45:05 +0530</pubDate>
      
      <guid>https://chiragbhatia.github.io/ES5-Standards/objects/JSON.stringify/</guid>
      <description>&lt;p&gt;The JSON.stringify() method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified.&lt;/p&gt;

&lt;h3&gt;Need for this&lt;/h3&gt;
JSON.stringify allows developers to convert JavaScript objects into strings for processing. Optionally, it also allows the developer to pass a `replacer` function that allows manipulation / filter of key / values of the input Object before it is returned as a string.

&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;JSON.stringify() ensures that the JSON object passed is not malformed and in some cases fixes the syntax of malformed JSON objects.&lt;/li&gt;
  &lt;li&gt;JSON.stringify() allows a second (replacer) parameter to transform / filter out the JSON values before they are returned as a string.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Working Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;JSON.stringify({ x: 15, y: 26 });
// &#39;{&amp;quot;x&amp;quot;:5,&amp;quot;y&amp;quot;:6}&#39;

function replacer(key, value) {
    // Filtering out properties
    if (typeof value === &amp;quot;number&amp;quot; || typeof value === &amp;quot;object&amp;quot;) {
        return value;
    }
    return undefined;
}
var foo = {name: &amp;quot;Deloitte&amp;quot;, city: &amp;quot;Mumbai&amp;quot;, offices: 1, location: &amp;quot;Powai&amp;quot;, employees: 15000};
JSON.stringify(foo, replacer);
// &#39;{&amp;quot;offices&amp;quot;:1,&amp;quot;employees&amp;quot;:15000}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h3&gt;References&lt;/h3&gt;
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&lt;/a&gt;
&lt;br&gt;
&lt;a href=&#34;https://msdn.microsoft.com/library/cc836459(v=vs.94).aspx&#34;&gt;https://msdn.microsoft.com/library/cc836459(v=vs.94).aspx&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>